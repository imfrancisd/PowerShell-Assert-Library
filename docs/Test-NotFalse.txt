
NAME
    Test-NotFalse
    
SYNOPSIS
    Test that a value is not the Boolean value $false.
    
SYNTAX
    Test-NotFalse [-Value] <Object> [<CommonParameters>]
    
    
DESCRIPTION
    This function tests if a value is not $false without the implicit conversions or the filtering semantics from the 
    PowerShell comparison operators.
    
        Return Value   Condition
        ------------   ---------
        $null          never
        $false         value is the System.Boolean value $false
        $true          value is not of type System.Boolean
                       value is $true
    

PARAMETERS
    -Value <Object>
        The value to test.
        
        Required?                    true
        Position?                    1
        Default value                
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    <CommonParameters>
        This cmdlet supports the common parameters: Verbose, Debug,
        ErrorAction, ErrorVariable, WarningAction, WarningVariable,
        OutBuffer, PipelineVariable, and OutVariable. For more information, see 
        about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216). 
    
INPUTS
    None
    
    This function does not accept input from the pipeline.
        
    
    
    
OUTPUTS
    System.Boolean
        
    
    
    
NOTES
    
    
        An example of how this function might be used in a unit test.
        
        #recommended alias
        set-alias 'notFalse?' 'test-notfalse'
        
        assert-all    $items {param($a) (notFalse? $a.b) -and (notFalse? $a.c)}
        assert-exists $items {param($a) (notFalse? $a.d) -xor (notFalse? $a.e)}
    
    -------------------------- EXAMPLE 1 --------------------------
    
    PS C:\>Test-NotFalse 0
    
    
    Test if the number 0 is not $false without performing any implicit conversions.
    
    Note:
    Compare the example above with the following expressions:
        0 -ne $false
        '0' -ne $false
    and see how tests can become confusing if those numbers were stored in variables.
    
    
    
    
    
    -------------------------- EXAMPLE 2 --------------------------
    
    PS C:\>Test-NotFalse @($false)
    
    
    Test if the array is not $false without filtering semantics.
    
    Note:
    Compare the example above with the following expressions:
        @(0, $false) -ne $false
        @(-1, 0, 1, 2, 3) -ne $false
    and see how tests can become confusing if the value is stored in a variable or if the value is not expected to be 
    an array.
    
    
    
    
    
    
RELATED LINKS
    Test-True 
    Test-False 
    Test-Null 
    Test-NotTrue 
    Test-NotNull 
    Test-All 
    Test-Exists 
    Test-NotExists 



