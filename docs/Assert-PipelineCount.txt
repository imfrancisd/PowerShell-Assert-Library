
NAME
    Assert-PipelineCount
    
SYNOPSIS
    Assert the number of objects in the pipeline.
    
SYNTAX
    Assert-PipelineCount -InputObject <Object> [-Equals] <Int64> [<CommonParameters>]
    
    Assert-PipelineCount -InputObject <Object> -Maximum <Int64> [<CommonParameters>]
    
    Assert-PipelineCount -InputObject <Object> -Minimum <Int64> [<CommonParameters>]
    
    Assert-PipelineCount -InputObject <Object> -NotEquals <Int64> [<CommonParameters>]
    
    
DESCRIPTION
    This function is useful for asserting that a function outputs the correct number of objects.
    
    See the -Equals, -Maximum, -Minimum, and -NotEquals parameters for more details.
    
    Note:
    This function will output all pipeline objects it receives until an error is thrown, or until there are no more 
    objects left in the pipeline.
    

PARAMETERS
    -InputObject <Object>
        The object from the pipeline.
        
        Note:
        The argument for this parameter must come from the pipeline.
        
        Required?                    true
        Position?                    named
        Default value                
        Accept pipeline input?       true (ByValue)
        Accept wildcard characters?  false
        
    -Equals <Int64>
        This function will throw an error if the number of objects in the pipeline is not equal to the number 
        specified by this parameter.
        
        The -Equals parameter has the alias -eq.
        
        Note:
        A negative number will always cause this assertion to fail.
        
        Required?                    true
        Position?                    1
        Default value                0
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    -Maximum <Int64>
        This function will throw an error if the number of objects in the pipeline is more than the number specified 
        by this parameter.
        
        The -Maximum parameter has the alias -max.
        
        Note:
        A negative number will always cause this assertion to fail.
        
        Required?                    true
        Position?                    named
        Default value                0
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    -Minimum <Int64>
        This function will throw an error if the number of objects in the pipeline is less than the number specified 
        by this parameter.
        
        The -Minimum parameter has the alias -min.
        
        Note:
        A negative number will always cause this assertion to pass.
        
        Required?                    true
        Position?                    named
        Default value                0
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    -NotEquals <Int64>
        This function will throw an error if the number of objects in the pipeline is not equal to the number 
        specified by this parameter.
        
        The -NotEquals parameter has the alias -ne.
        
        Note:
        A negative number will always cause this assertion to pass.
        
        Required?                    true
        Position?                    named
        Default value                0
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    <CommonParameters>
        This cmdlet supports the common parameters: Verbose, Debug,
        ErrorAction, ErrorVariable, WarningAction, WarningVariable,
        OutBuffer, PipelineVariable, and OutVariable. For more information, see 
        about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216). 
    
INPUTS
    System.Object
    
    This function accepts any kind of object from the pipeline.
        
    
    
    
OUTPUTS
    System.Object
    
    If the assertion passes, this function outputs the objects from the pipeline input.
        
    
    
    
NOTES
    
    
        An example of how this function might be used in a unit test.
        
        #display passing assertions
        $VerbosePreference = [System.Management.Automation.ActionPreference]::Continue
        
        #display debug prompt on failing assertions
        $DebugPreference = [System.Management.Automation.ActionPreference]::Inquire
        
        $a = myFunc1 | Assert-PipelineCount 10
        $b = myFunc2 | Assert-PipelineCount -Minimum 1
        $c = myFunc3 | Assert-PipelineCount -Maximum 2
        $d = myFunc4 | Assert-PipelineCount -Minimum 3 | Assert-PipelineCount -Maximum 14
    
    -------------------------- EXAMPLE 1 --------------------------
    
    PS C:\>$nums = 1..100 | Get-Random -Count 10 | Assert-PipelineCount 10
    
    
    Throws an error if Get-Random -Count 10 does not return exactly ten objects.
    
    
    
    
    
    -------------------------- EXAMPLE 2 --------------------------
    
    PS C:\>$nums = 1..100 | Get-Random -Count 10 | Assert-PipelineCount -Maximum 10
    
    
    Throws an error if Get-Random -Count 10 returns more than ten objects.
    
    
    
    
    
    -------------------------- EXAMPLE 3 --------------------------
    
    PS C:\>$nums = 1..100 | Get-Random -Count 10 | Assert-PipelineCount -Minimum 10
    
    
    Throws an error if Get-Random -Count 10 returns less than ten objects.
    
    
    
    
    
    -------------------------- EXAMPLE 4 --------------------------
    
    PS C:\>$nums = 1..100 | Get-Random -Count 10 | Assert-PipelineCount -NotEquals 100
    
    
    Throws an error if Get-Random -Count 10 returns exactly one hundred objects.
    
    
    
    
    
    -------------------------- EXAMPLE 5 --------------------------
    
    PS C:\>$nums = 1..100 | Get-Random -Count 10 | Assert-PipelineCount 10 -Verbose
    
    
    Throws an error if Get-Random -Count 10 does not return exactly ten objects.
    The -Verbose switch will output the result of the assertion to the Verbose stream.
    
    
    
    
    
    -------------------------- EXAMPLE 6 --------------------------
    
    PS C:\>$nums = 1..100 | Get-Random -Count 10 | Assert-PipelineCount 10 -Debug
    
    
    Throws an error if Get-Random -Count 10 does not return exactly ten objects.
    The -Debug switch gives you a chance to investigate a failing assertion before an error is thrown.
    
    
    
    
    
    -------------------------- EXAMPLE 7 --------------------------
    
    PS C:\>$a = Get-ChildItem 'a*' | Assert-PipelineCount -Minimum 5 | Assert-PipelineCount -Maximum 10
    
    
    Throws an error if Get-ChildItem 'a*' either returns less than five objects, or returns more than 10 objects.
    
    
    
    
    
    
RELATED LINKS
    Assert-True 
    Assert-False 
    Assert-Null 
    Assert-NotTrue 
    Assert-NotFalse 
    Assert-NotNull 
    Assert-All 
    Assert-Exists 
    Assert-NotExists 
    Assert-PipelineAll 
    Assert-PipelineExists 
    Assert-PipelineNotExists 
    Assert-PipelineEmpty 
    Assert-PipelineAny 
    Assert-PipelineSingle 



