
NAME
    Test-Exists
    
SYNOPSIS
    Test that a predicate is true for some of the items in a collection.
    
SYNTAX
    Test-Exists [-Collection] <Object> [-Predicate] <ScriptBlock> [-Quantity <String>] [<CommonParameters>]
    
    
DESCRIPTION
    This function tests if a predicate is $true for some of the items in a collection.
    
        Return Value   Condition
        ------------   ---------
        $null          the collection is not of type System.Collections.ICollection
        $false         there does not exist* an item in the collection that makes the predicate true
                       the collection is empty
        $true          there exists* an item in the collection that makes the predicate true
    
        *The meaning of "to exist" can be modified with the -Quantity parameter.
    
    *See the -Collection, -Predicate, and -Quantity parameters for more details.
    

PARAMETERS
    -Collection <Object>
        The collection of items used to test the predicate.
        
        The order in which the items in the collection are tested is determined by the collection's GetEnumerator 
        method.
        
        Required?                    true
        Position?                    1
        Default value                
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    -Predicate <ScriptBlock>
        The script block that will be invoked on each item in the collection.
        
        The script block must take one argument and return a value.
        
        Note:
        The -ErrorAction parameter has NO effect on the predicate.
        An InvalidOperationException is thrown if the predicate throws an error.
        
        Required?                    true
        Position?                    2
        Default value                
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    -Quantity <String>
        The quantity of items ('Any', 'Single', 'Multiple') that must make the predicate true to make the test return 
        $true.
        
        The default is 'Any'.
        
        Required?                    false
        Position?                    named
        Default value                Any
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    <CommonParameters>
        This cmdlet supports the common parameters: Verbose, Debug,
        ErrorAction, ErrorVariable, WarningAction, WarningVariable,
        OutBuffer, PipelineVariable, and OutVariable. For more information, see 
        about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216). 
    
INPUTS
    None
    
    This function does not accept input from the pipeline.
        
    
    
    
OUTPUTS
    System.Boolean
    
    This function returns a Boolean if the test can be performed.
        
    
    
    $null
    
    This function returns $null if the test cannot be performed.
        
    
    
    
NOTES
    
    
        An example of how this function might be used in a unit test.
        
        #recommended alias
        set-alias 'exists?' 'test-exists'
        
        assert-all    $items {param($a) exists? $a.bArray {param($b) $b -gt 10}}
        assert-exists $items {param($a) exists? $a.cArray {param($c) $c -eq 0}}
    
    -------------------------- EXAMPLE 1 --------------------------
    
    PS C:\>Test-Exists @(1, 2, 3, 4, 5) {param($n) $n -gt 3}
    
    
    Test that at least one item in the array is greater than 3.
    
    
    
    
    
    -------------------------- EXAMPLE 2 --------------------------
    
    PS C:\>Test-Exists @() {param($n) $n -gt 3}
    
    
    Test that at least one item in the array is greater than 3.
    
    Note:
    This test will always return $false because the array is empty.
    
    
    
    
    
    -------------------------- EXAMPLE 3 --------------------------
    
    PS C:\>Test-Exists @('H', 'E', 'L', 'L', 'O') {param($c) $c -eq 'L'} -Quantity Multiple
    
    
    Test that there are multiple 'L' in the array.
    
    
    
    
    
    -------------------------- EXAMPLE 4 --------------------------
    
    PS C:\>Test-Exists @('H', 'E', 'L', 'L', 'O') {param($c) $c -eq 'H'} -Quantity Single
    
    
    Test that there is only a single 'H' in the array.
    
    
    
    
    
    -------------------------- EXAMPLE 5 --------------------------
    
    PS C:\>Test-Exists @{a0 = 10; a1 = 20; a2 = 30} {param($entry) $entry.Value -gt 25}
    
    
    Test that at least one entry in the hashtable has a value greater than 25.
    
    
    
    
    
    
RELATED LINKS
    Test-True 
    Test-False 
    Test-Null 
    Test-NotTrue 
    Test-NotFalse 
    Test-NotNull 
    Test-All 
    Test-NotExists 



