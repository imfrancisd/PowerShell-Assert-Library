
NAME
    Assert-PipelineSingle
    
SYNOPSIS
    Assert that the pipeline only contains one object.
    
SYNTAX
    Assert-PipelineSingle [-InputObject] <Object> [<CommonParameters>]
    
    
DESCRIPTION
    This function is useful for asserting that a function only returns a single object.
    
    This function throws an error if any of the following conditions are met:
        *the pipeline contains less than one object
        *the pipeline contains more than one object
    

PARAMETERS
    -InputObject <Object>
        The object from the pipeline.
        
        Note:
        The argument for this parameter must come from the pipeline.
        
        Required?                    true
        Position?                    1
        Default value                
        Accept pipeline input?       true (ByValue)
        Accept wildcard characters?  false
        
    <CommonParameters>
        This cmdlet supports the common parameters: Verbose, Debug,
        ErrorAction, ErrorVariable, WarningAction, WarningVariable,
        OutBuffer, PipelineVariable, and OutVariable. For more information, see 
        about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216). 
    
INPUTS
    System.Object
    
    This function accepts any kind of object from the pipeline.
        
    
    
    
OUTPUTS
    System.Object
    
    If the assertion passes, this function outputs the objects from the pipeline input.
        
    
    
    
NOTES
    
    
        An example of how this function might be used in a unit test.
        
        #display passing assertions
        $VerbosePreference = [System.Management.Automation.ActionPreference]::Continue
        
        #display debug prompt on failing assertions
        $DebugPreference = [System.Management.Automation.ActionPreference]::Inquire
        
        $a = myFunc1 | Assert-PipelineSingle
        $b = myFunc2 | Assert-PipelineSingle
        $c = myFunc3 | Assert-PipelineSingle
    
    -------------------------- EXAMPLE 1 --------------------------
    
    PS C:\>$letter = 'a', 'b', 'c' | Get-Random | Assert-PipelineSingle
    
    
    Throws an error if Get-Random does not return a single object.
    
    
    
    
    
    -------------------------- EXAMPLE 2 --------------------------
    
    PS C:\>$letter = 'a', 'b', 'c' | Get-Random | Assert-PipelineSingle -Verbose
    
    
    Throws an error if Get-Random does not return a single object.
    The -Verbose switch will output the result of the assertion to the Verbose stream.
    
    
    
    
    
    -------------------------- EXAMPLE 3 --------------------------
    
    PS C:\>$letter = 'a', 'b', 'c' | Get-Random | Assert-PipelineSingle -Debug
    
    
    Throws an error if Get-Random does not return a single object.
    The -Debug switch gives you a chance to investigate a failing assertion before an error is thrown.
    
    
    
    
    
    
RELATED LINKS
    Assert-True 
    Assert-False 
    Assert-Null 
    Assert-NotTrue 
    Assert-NotFalse 
    Assert-NotNull 
    Assert-All 
    Assert-Exists 
    Assert-NotExists 
    Assert-PipelineAll 
    Assert-PipelineExists 
    Assert-PipelineNotExists 
    Assert-PipelineEmpty 
    Assert-PipelineAny 
    Assert-PipelineCount 



