<?xml version="1.0" encoding="utf-8"?>
<helpItems schema="maml">
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10">
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Assert-PipelineAny</maml:name>
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>InputObject</maml:name>
          <command:parameterValue required="true">Object</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
        <maml:name>InputObject</maml:name>
        <maml:description>
          <maml:para>The object from the pipeline.

Note:
The argument for this parameter must come from the pipeline.</maml:para>
        </maml:description>
        <command:parameterValue required="true">Object</command:parameterValue>
        <dev:type>
          <maml:name>Object</maml:name>
        </dev:type>
        <dev:defaultValue>
        </dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:details>
      <command:name>Assert-PipelineAny</command:name>
      <command:verb>Assert</command:verb>
      <command:noun>PipelineAny</command:noun>
      <maml:description>
        <maml:para>Assert that the pipeline contains one or more objects.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function is useful for asserting that a function returns one or more objects.

This function throws an error if any of the following conditions are met:
    *the pipeline contains less than one object</maml:para>
    </maml:description>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>An example of how this function might be used in a unit test.

#display passing assertions
$VerbosePreference = [System.Management.Automation.ActionPreference]::Continue

#display debug prompt on failing assertions
$DebugPreference = [System.Management.Automation.ActionPreference]::Inquire

$a = myFunc1 | Assert-PipelineAny
$b = myFunc2 | Assert-PipelineAny
$c = myFunc3 | Assert-PipelineAny</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <maml:introduction>
          <maml:para>C:\PS&gt;</maml:para>
        </maml:introduction>
        <dev:code>$letter = 'a', 'b', 'c' | Get-Random | Assert-PipelineAny</dev:code>
        <dev:remarks>
          <maml:para>Throws an error if Get-Random does not return any objects.</maml:para>
          <maml:para>
          </maml:para>
          <maml:para>
          </maml:para>
          <maml:para>
          </maml:para>
          <maml:para>
          </maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <maml:introduction>
          <maml:para>C:\PS&gt;</maml:para>
        </maml:introduction>
        <dev:code>$letter = 'a', 'b', 'c' | Get-Random | Assert-PipelineAny -Verbose</dev:code>
        <dev:remarks>
          <maml:para>Throws an error if Get-Random does not return any objects.
The -Verbose switch will output the result of the assertion to the Verbose stream.</maml:para>
          <maml:para>
          </maml:para>
          <maml:para>
          </maml:para>
          <maml:para>
          </maml:para>
          <maml:para>
          </maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <maml:introduction>
          <maml:para>C:\PS&gt;</maml:para>
        </maml:introduction>
        <dev:code>$letter = 'a', 'b', 'c' | Get-Random | Assert-PipelineAny -Debug</dev:code>
        <dev:remarks>
          <maml:para>Throws an error if Get-Random does not return any objects.
The -Debug switch gives you a chance to investigate a failing assertion before an error is thrown.</maml:para>
          <maml:para>
          </maml:para>
          <maml:para>
          </maml:para>
          <maml:para>
          </maml:para>
          <maml:para>
          </maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Assert-True
Assert-False
Assert-Null
Assert-NotNull
Assert-PipelineEmpty
Assert-PipelineSingle
Assert-PipelineCount</maml:linkText>
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
</helpItems>
