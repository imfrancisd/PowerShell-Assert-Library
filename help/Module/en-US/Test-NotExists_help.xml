<?xml version="1.0" encoding="utf-8"?>
<helpItems schema="maml">
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Test-NotExists</command:name>
      <maml:description>
        <maml:para>Test that a predicate is never true for any item in a collection.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Test</command:verb>
      <command:noun>NotExists</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>This function tests if a predicate is never $true for any item in a collection.

    Return Value   Condition
    ------------   ---------
    $null          the collection is not of type System.Collections.ICollection
    $false         the predicate returns the System.Boolean value $true one or more times
    $true          the predicate never returns the System.Boolean value $true
                   the collection is empty

*See the -Collection and -Predicate parameters for more details.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Test-NotExists</maml:name>
        <command:parameter required="true" globbing="false" pipelineInput="false" position="1" aliases="">
          <maml:name>Collection</maml:name>
          <command:parameterValue required="true">Object</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" globbing="false" pipelineInput="false" position="2" aliases="">
          <maml:name>Predicate</maml:name>
          <command:parameterValue required="true">ScriptBlock</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" globbing="false" pipelineInput="false" position="1" aliases="">
        <maml:name>Collection</maml:name>
        <maml:description>
          <maml:para>The collection of items used to test the predicate.

The order in which the items in the collection are tested is determined by the collection's GetEnumerator method.</maml:para>
        </maml:description>
        <command:parameterValue required="true">Object</command:parameterValue>
        <dev:type>
          <maml:name>Object</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>
        </dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" globbing="false" pipelineInput="false" position="2" aliases="">
        <maml:name>Predicate</maml:name>
        <maml:description>
          <maml:para>The script block that will be invoked on each item in the collection.

The script block must take one argument and return a value.

Note:
The -ErrorAction parameter has NO effect on the predicate.
An InvalidOperationException is thrown if the predicate throws an error.</maml:para>
        </maml:description>
        <command:parameterValue required="true">ScriptBlock</command:parameterValue>
        <dev:type>
          <maml:name>ScriptBlock</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>
        </dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None

This function does not accept input from the pipeline.</maml:name>
          <maml:uri />
        </dev:type>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Boolean

This function returns a Boolean if the test can be performed.</maml:name>
          <maml:uri />
        </dev:type>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>$null

This function returns $null if the test cannot be performed.</maml:name>
          <maml:uri />
        </dev:type>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>An example of how this function might be used in a unit test.

#recommended alias
set-alias 'notExists?' 'test-notexists'

assert-all    $items {param($a) notExists? $a.bArray {param($b) $b -gt 10}}
assert-exists $items {param($a) notExists? $a.cArray {param($c) $c -eq 0}}</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <maml:introduction>
          <maml:para>C:\PS&gt;</maml:para>
        </maml:introduction>
        <dev:code>Test-NotExists @(1, 2, 3, 4, 5) {param($n) $n -gt 10}</dev:code>
        <dev:remarks>
          <maml:para>Test that no item in the array is greater than 10.</maml:para>
          <maml:para />
          <maml:para />
          <maml:para />
          <maml:para />
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <maml:introduction>
          <maml:para>C:\PS&gt;</maml:para>
        </maml:introduction>
        <dev:code>Test-NotExists @() {param($n) $n -gt 10}</dev:code>
        <dev:remarks>
          <maml:para>Test that no item in the array is greater than 10.

Note:
This test will always return $true because the array is empty.</maml:para>
          <maml:para />
          <maml:para />
          <maml:para />
          <maml:para />
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <maml:introduction>
          <maml:para>C:\PS&gt;</maml:para>
        </maml:introduction>
        <dev:code>Test-NotExists @{a0 = 10; a1 = 20; a2 = 30} {param($entry) $entry.Value -lt 0}</dev:code>
        <dev:remarks>
          <maml:para>Test that no entry in the hashtable has a value less than 0.</maml:para>
          <maml:para />
          <maml:para />
          <maml:para />
          <maml:para />
        </dev:remarks>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Test-True</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-False</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-Null</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-NotTrue</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-NotFalse</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-NotNull</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-All</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-Exists</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
</helpItems>
