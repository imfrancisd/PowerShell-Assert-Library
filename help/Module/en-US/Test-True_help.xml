<?xml version="1.0" encoding="utf-8"?>
<helpItems xmlns="http://msh" schema="maml">
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Test-True</command:name>
      <maml:description>
        <maml:para>Test that a value is the Boolean value $true.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Test</command:verb>
      <command:noun>True</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>This function tests if a value is $true without the implicit conversions or the filtering semantics from the PowerShell comparison operators.

    Return Value   Condition
    ------------   ---------
    $null          never
    $false         value is not of type System.Boolean
                   value is not $true
    $true          value is $true</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Test-True</maml:name>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="">
          <maml:name>Value</maml:name>
          <maml:description>
            <maml:para>The value to test.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="">
        <maml:name>Value</maml:name>
        <maml:description>
          <maml:para>The value to test.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
        <dev:type>
          <maml:name>Object</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue />
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None

This function does not accept input from the pipeline.</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Boolean</maml:name>
          <maml:uri />
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para />
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <maml:alertSet>
      <maml:alert>
        <maml:para>An example of how this function might be used in a unit test.

#recommended alias
set-alias 'true?' 'test-true'

assert-all    $items {param($a) (true? $a.b) -and (true? $a.c)}
assert-exists $items {param($a) (true? $a.d) -xor (true? $a.e)}</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <maml:introduction>
          <maml:para>C:\PS&gt;</maml:para>
        </maml:introduction>
        <dev:code>Test-True 1</dev:code>
        <dev:remarks>
          <maml:para>Test if the number 1 is $true without performing any implicit conversions.

Note:
Compare the example above with the following expressions:
    1 -eq $true
    10 -eq $true
and see how tests can become confusing if those numbers were stored in variables.</maml:para>
          <maml:para />
          <maml:para />
          <maml:para />
          <maml:para />
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <maml:introduction>
          <maml:para>C:\PS&gt;</maml:para>
        </maml:introduction>
        <dev:code>Test-True @($true)</dev:code>
        <dev:remarks>
          <maml:para>Test if the array is $true without filtering semantics.

Note:
Compare the example above with the following expressions:
    @(1, $true) -eq $true
    @(-1, 0, 1, 2, 3) -eq $true
and see how tests can become confusing if the value is stored in a variable or if the value is not expected to be an array.</maml:para>
          <maml:para />
          <maml:para />
          <maml:para />
          <maml:para />
        </dev:remarks>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Test-False</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-Null</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-NotTrue</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-NotFalse</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-NotNull</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-All</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-Exists</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-NotExists</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
</helpItems>
